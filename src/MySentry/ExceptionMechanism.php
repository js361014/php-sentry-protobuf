<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Event.proto

namespace PhpSentryProtobuf\MySentry;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>PhpSentryProtobuf.MySentry.ExceptionMechanism</code>
 */
class ExceptionMechanism extends \Google\Protobuf\Internal\Message
{
    /**
     *Unique identifier of this mechanism determining rendering and processing of the mechanism data
     *
     * Generated from protobuf field <code>string type = 1;</code>
     */
    protected $type = '';
    /**
     *Flag indicating whether the exception has been handled by the user (e.g. via try..catch)
     *
     * Generated from protobuf field <code>bool handled = 2;</code>
     */
    protected $handled = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $type
     *          Unique identifier of this mechanism determining rendering and processing of the mechanism data
     *     @type bool $handled
     *          Flag indicating whether the exception has been handled by the user (e.g. via try..catch)
     * }
     */
    public function __construct($data = NULL) {
        \PhpSentryProtobuf\Metadata\Event::initOnce();
        parent::__construct($data);
    }

    /**
     *Unique identifier of this mechanism determining rendering and processing of the mechanism data
     *
     * Generated from protobuf field <code>string type = 1;</code>
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     *Unique identifier of this mechanism determining rendering and processing of the mechanism data
     *
     * Generated from protobuf field <code>string type = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, True);
        $this->type = $var;

        return $this;
    }

    /**
     *Flag indicating whether the exception has been handled by the user (e.g. via try..catch)
     *
     * Generated from protobuf field <code>bool handled = 2;</code>
     * @return bool
     */
    public function getHandled()
    {
        return $this->handled;
    }

    /**
     *Flag indicating whether the exception has been handled by the user (e.g. via try..catch)
     *
     * Generated from protobuf field <code>bool handled = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setHandled($var)
    {
        GPBUtil::checkBool($var);
        $this->handled = $var;

        return $this;
    }

}

